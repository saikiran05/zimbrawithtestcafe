"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../shared/errors");
const api_base_1 = __importDefault(require("../api-base"));
const test_run_1 = require("../../errors/test-run");
const UNCAUGHT_PROMISE_REJECTION = 'Uncaught (in promise)';
const UNCAUGHT_JS_ERROR = 'Uncaught';
const NO_STACK_TRACE_AVAILABLE_MESSAGE = 'No stack trace available';
class JSErrorHandlingAPI extends api_base_1.default {
    constructor(browserId, client) {
        super(browserId, client);
        this.command = null;
    }
    async init() {
        this._client.Runtime.on('exceptionThrown', async ({ exceptionDetails }) => {
            this._addTestRunEvents();
            const errorMessage = this._getErrorMessage(exceptionDetails);
            const errFilter = this._getErrFilter(exceptionDetails, errorMessage);
            try {
                if (!this._getShouldSkipJsErrors(errFilter))
                    this._testRun.addProxylessJSError(new errors_1.UncaughtErrorOnPage(errorMessage, exceptionDetails.url));
            }
            catch (err) {
                this._testRun.addProxylessJSError(new test_run_1.UncaughtErrorInTestCode(err));
            }
        });
    }
    setErrorHandler(command) {
        this.command = command;
    }
    _getErrorMessage(exceptionDetails) {
        var _a, _b;
        if (exceptionDetails.text === UNCAUGHT_JS_ERROR)
            return (_a = exceptionDetails.exception) === null || _a === void 0 ? void 0 : _a.description;
        if (exceptionDetails.text === UNCAUGHT_PROMISE_REJECTION)
            return ((_b = exceptionDetails.exception) === null || _b === void 0 ? void 0 : _b.value) + `\n    ${NO_STACK_TRACE_AVAILABLE_MESSAGE}`;
        return void 0;
    }
    _getErrFilter(exceptionDetails, errorMessage) {
        var _a, _b, _c, _d, _e, _f;
        const stack = (_c = (_b = (_a = exceptionDetails.exception) === null || _a === void 0 ? void 0 : _a.preview) === null || _b === void 0 ? void 0 : _b.properties[0]) === null || _c === void 0 ? void 0 : _c.value;
        const message = (_f = (_e = (_d = exceptionDetails.exception) === null || _d === void 0 ? void 0 : _d.preview) === null || _e === void 0 ? void 0 : _e.properties[1]) === null || _f === void 0 ? void 0 : _f.value;
        return {
            stack: stack || errorMessage,
            pageUrl: exceptionDetails.url,
            message: message || errorMessage,
        };
    }
    _getShouldSkipJsErrors(errFilter) {
        const options = this.command ? this.command.options : this._testRun.prepareSkipJsErrorsOption();
        if (options === true)
            return true;
        if (typeof options === 'function')
            // @ts-ignore
            return options(errFilter);
        return false;
    }
    _addTestRunEvents() {
        this._testRun.once('done', this._dispose.bind(this));
    }
    _dispose() {
        this.command = null;
    }
}
exports.default = JSErrorHandlingAPI;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2pzLWVycm9yLWhhbmRsaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsZ0RBQTBEO0FBQzFELDJEQUEyQztBQUkzQyxvREFBZ0U7QUFHaEUsTUFBTSwwQkFBMEIsR0FBRyx1QkFBdUIsQ0FBQztBQUMzRCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQztBQUNyQyxNQUFNLGdDQUFnQyxHQUFHLDBCQUEwQixDQUFDO0FBR3BFLE1BQXFCLGtCQUFtQixTQUFRLGtCQUFnQjtJQUc1RCxZQUFhLFNBQWlCLEVBQUUsTUFBbUI7UUFDL0MsS0FBSyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLEVBQUUsZ0JBQWdCLEVBQXdCLEVBQUUsRUFBRTtZQUM1RixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUV6QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUM3RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRXJFLElBQUk7Z0JBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7b0JBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSw0QkFBbUIsQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN0RztZQUNELE9BQU8sR0FBRyxFQUFFO2dCQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxrQ0FBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3ZFO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sZUFBZSxDQUFFLE9BQTRCO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFTyxnQkFBZ0IsQ0FBRSxnQkFBbUQ7O1FBQ3pFLElBQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLGlCQUFpQjtZQUMzQyxPQUFPLE1BQUEsZ0JBQWdCLENBQUMsU0FBUywwQ0FBRSxXQUFXLENBQUM7UUFFbkQsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssMEJBQTBCO1lBQ3BELE9BQU8sQ0FBQSxNQUFBLGdCQUFnQixDQUFDLFNBQVMsMENBQUUsS0FBSyxJQUFHLFNBQVMsZ0NBQWdDLEVBQUUsQ0FBQztRQUUzRixPQUFPLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFTyxhQUFhLENBQUUsZ0JBQW1ELEVBQUUsWUFBZ0M7O1FBQ3hHLE1BQU0sS0FBSyxHQUFHLE1BQUEsTUFBQSxNQUFBLGdCQUFnQixDQUFDLFNBQVMsMENBQUUsT0FBTywwQ0FBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLDBDQUFFLEtBQUssQ0FBQztRQUN4RSxNQUFNLE9BQU8sR0FBRyxNQUFBLE1BQUEsTUFBQSxnQkFBZ0IsQ0FBQyxTQUFTLDBDQUFFLE9BQU8sMENBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQywwQ0FBRSxLQUFLLENBQUM7UUFFMUUsT0FBTztZQUNILEtBQUssRUFBSSxLQUFLLElBQUksWUFBWTtZQUM5QixPQUFPLEVBQUUsZ0JBQWdCLENBQUMsR0FBRztZQUM3QixPQUFPLEVBQUUsT0FBTyxJQUFJLFlBQVk7U0FDbkMsQ0FBQztJQUNOLENBQUM7SUFFTyxzQkFBc0IsQ0FBRSxTQUFvQztRQUNoRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBRWhHLElBQUksT0FBTyxLQUFLLElBQUk7WUFDaEIsT0FBTyxJQUFJLENBQUM7UUFFaEIsSUFBSSxPQUFPLE9BQU8sS0FBSyxVQUFVO1lBQzdCLGFBQWE7WUFDYixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5QixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztDQUNKO0FBdkVELHFDQXVFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVW5jYXVnaHRFcnJvck9uUGFnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9lcnJvcnMnO1xuaW1wb3J0IFByb3h5bGVzc0FwaUJhc2UgZnJvbSAnLi4vYXBpLWJhc2UnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBFeGNlcHRpb25UaHJvd25FdmVudCA9IFByb3RvY29sLlJ1bnRpbWUuRXhjZXB0aW9uVGhyb3duRXZlbnQ7XG5pbXBvcnQgeyBTa2lwSnNFcnJvcnNDb21tYW5kIH0gZnJvbSAnLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYWN0aW9ucyc7XG5pbXBvcnQgeyBVbmNhdWdodEVycm9ySW5UZXN0Q29kZSB9IGZyb20gJy4uLy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgeyBTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0IH0gZnJvbSAnLi4vLi4vY29uZmlndXJhdGlvbi9pbnRlcmZhY2VzJztcblxuY29uc3QgVU5DQVVHSFRfUFJPTUlTRV9SRUpFQ1RJT04gPSAnVW5jYXVnaHQgKGluIHByb21pc2UpJztcbmNvbnN0IFVOQ0FVR0hUX0pTX0VSUk9SID0gJ1VuY2F1Z2h0JztcbmNvbnN0IE5PX1NUQUNLX1RSQUNFX0FWQUlMQUJMRV9NRVNTQUdFID0gJ05vIHN0YWNrIHRyYWNlIGF2YWlsYWJsZSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSlNFcnJvckhhbmRsaW5nQVBJIGV4dGVuZHMgUHJveHlsZXNzQXBpQmFzZSB7XG4gICAgcHJpdmF0ZSBjb21tYW5kOiBTa2lwSnNFcnJvcnNDb21tYW5kIHwgbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yIChicm93c2VySWQ6IHN0cmluZywgY2xpZW50OiBQcm90b2NvbEFwaSkge1xuICAgICAgICBzdXBlcihicm93c2VySWQsIGNsaWVudCk7XG5cbiAgICAgICAgdGhpcy5jb21tYW5kID0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX2NsaWVudC5SdW50aW1lLm9uKCdleGNlcHRpb25UaHJvd24nLCBhc3luYyAoeyBleGNlcHRpb25EZXRhaWxzIH06IEV4Y2VwdGlvblRocm93bkV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hZGRUZXN0UnVuRXZlbnRzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHRoaXMuX2dldEVycm9yTWVzc2FnZShleGNlcHRpb25EZXRhaWxzKTtcbiAgICAgICAgICAgIGNvbnN0IGVyckZpbHRlciA9IHRoaXMuX2dldEVyckZpbHRlcihleGNlcHRpb25EZXRhaWxzLCBlcnJvck1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZ2V0U2hvdWxkU2tpcEpzRXJyb3JzKGVyckZpbHRlcikpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RSdW4uYWRkUHJveHlsZXNzSlNFcnJvcihuZXcgVW5jYXVnaHRFcnJvck9uUGFnZShlcnJvck1lc3NhZ2UsIGV4Y2VwdGlvbkRldGFpbHMudXJsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVzdFJ1bi5hZGRQcm94eWxlc3NKU0Vycm9yKG5ldyBVbmNhdWdodEVycm9ySW5UZXN0Q29kZShlcnIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEVycm9ySGFuZGxlciAoY29tbWFuZDogU2tpcEpzRXJyb3JzQ29tbWFuZCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldEVycm9yTWVzc2FnZSAoZXhjZXB0aW9uRGV0YWlsczogUHJvdG9jb2wuUnVudGltZS5FeGNlcHRpb25EZXRhaWxzKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGV4Y2VwdGlvbkRldGFpbHMudGV4dCA9PT0gVU5DQVVHSFRfSlNfRVJST1IpXG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0aW9uRGV0YWlscy5leGNlcHRpb24/LmRlc2NyaXB0aW9uO1xuXG4gICAgICAgIGlmIChleGNlcHRpb25EZXRhaWxzLnRleHQgPT09IFVOQ0FVR0hUX1BST01JU0VfUkVKRUNUSU9OKVxuICAgICAgICAgICAgcmV0dXJuIGV4Y2VwdGlvbkRldGFpbHMuZXhjZXB0aW9uPy52YWx1ZSArIGBcXG4gICAgJHtOT19TVEFDS19UUkFDRV9BVkFJTEFCTEVfTUVTU0FHRX1gO1xuXG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0RXJyRmlsdGVyIChleGNlcHRpb25EZXRhaWxzOiBQcm90b2NvbC5SdW50aW1lLkV4Y2VwdGlvbkRldGFpbHMsIGVycm9yTWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdCB7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gZXhjZXB0aW9uRGV0YWlscy5leGNlcHRpb24/LnByZXZpZXc/LnByb3BlcnRpZXNbMF0/LnZhbHVlO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXhjZXB0aW9uRGV0YWlscy5leGNlcHRpb24/LnByZXZpZXc/LnByb3BlcnRpZXNbMV0/LnZhbHVlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFjazogICBzdGFjayB8fCBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBwYWdlVXJsOiBleGNlcHRpb25EZXRhaWxzLnVybCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldFNob3VsZFNraXBKc0Vycm9ycyAoZXJyRmlsdGVyOiBTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNvbW1hbmQgPyB0aGlzLmNvbW1hbmQub3B0aW9ucyA6IHRoaXMuX3Rlc3RSdW4ucHJlcGFyZVNraXBKc0Vycm9yc09wdGlvbigpO1xuXG4gICAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMoZXJyRmlsdGVyKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYWRkVGVzdFJ1bkV2ZW50cyAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3Rlc3RSdW4ub25jZSgnZG9uZScsIHRoaXMuX2Rpc3Bvc2UuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZGlzcG9zZSAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IG51bGw7XG4gICAgfVxufVxuIl19