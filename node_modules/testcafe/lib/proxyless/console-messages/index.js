"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const formatter_1 = __importDefault(require("./formatter"));
const api_base_1 = __importDefault(require("../api-base"));
const types_1 = require("./types");
class ConsoleMessagesAPI extends api_base_1.default {
    constructor(browserId, client) {
        super(browserId, client);
        this._consoleMessages = {};
    }
    _getBrowserConsoleMessages(url, type) {
        if (!this._consoleMessages[this._testRun.id])
            this._consoleMessages[this._testRun.id] = {};
        const testRunMessages = this._consoleMessages[this._testRun.id];
        if (!testRunMessages[url]) {
            testRunMessages[url] = {
                error: [],
                warning: [],
                log: [],
                info: [],
            };
        }
        return testRunMessages[url][type];
    }
    async init() {
        this._client.Runtime.on('consoleAPICalled', async ({ type, args }) => {
            if (!types_1.CONSOLE_MESSAGES_ENTRY_KEYS.includes(type))
                return;
            const { host } = await this._getCurrentUrl();
            const messages = this._getBrowserConsoleMessages(host, type);
            messages.push(formatter_1.default.format(args));
        });
    }
    static _createBrowserConsoleMessages(info, log, error, warn) {
        return {
            info,
            log,
            error,
            warn,
        };
    }
    async getBrowserConsoleMessages() {
        const { host } = await this._getCurrentUrl();
        const testRunMessages = this._consoleMessages[this._testRun.id];
        if (!testRunMessages || !testRunMessages[host])
            return ConsoleMessagesAPI._createBrowserConsoleMessages([], [], [], []);
        const messages = JSON.parse(JSON.stringify(testRunMessages[host]));
        return ConsoleMessagesAPI._createBrowserConsoleMessages(messages.info, messages.log, messages.error, messages.warning);
    }
}
exports.default = ConsoleMessagesAPI;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NvbnNvbGUtbWVzc2FnZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSw0REFBa0Q7QUFFbEQsMkRBQTJDO0FBRTNDLG1DQUlpQjtBQUdqQixNQUFxQixrQkFBbUIsU0FBUSxrQkFBZ0I7SUFHNUQsWUFBYSxTQUFpQixFQUFFLE1BQW1CO1FBQy9DLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sMEJBQTBCLENBQUUsR0FBVyxFQUFFLElBQThCO1FBQzNFLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDeEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWpELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhFLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdkIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHO2dCQUNuQixLQUFLLEVBQUksRUFBRTtnQkFDWCxPQUFPLEVBQUUsRUFBRTtnQkFDWCxHQUFHLEVBQU0sRUFBRTtnQkFDWCxJQUFJLEVBQUssRUFBRTthQUNkLENBQUM7U0FDTDtRQUVELE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUEwQyxFQUFFLEVBQUU7WUFDekcsSUFBSSxDQUFDLG1DQUEyQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQzNDLE9BQU87WUFFWCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxJQUFnQyxDQUFDLENBQUM7WUFFekYsUUFBUSxDQUFDLElBQUksQ0FBQyxtQkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxNQUFNLENBQUMsNkJBQTZCLENBQ3hDLElBQWMsRUFDZCxHQUFhLEVBQ2IsS0FBZSxFQUNmLElBQWM7UUFFZCxPQUFPO1lBQ0gsSUFBSTtZQUNKLEdBQUc7WUFDSCxLQUFLO1lBQ0wsSUFBSTtTQUNQLENBQUM7SUFDTixDQUFDO0lBRU0sS0FBSyxDQUFDLHlCQUF5QjtRQUNsQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQVUsTUFBTSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDcEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7WUFDMUMsT0FBTyxrQkFBa0IsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU1RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVuRSxPQUFPLGtCQUFrQixDQUFDLDZCQUE2QixDQUNuRCxRQUFRLENBQUMsSUFBSSxFQUNiLFFBQVEsQ0FBQyxHQUFHLEVBQ1osUUFBUSxDQUFDLEtBQUssRUFDZCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNKO0FBcEVELHFDQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBDb25zb2xlTWVzc2FnZUZvcm1hdHRlciBmcm9tICcuL2Zvcm1hdHRlcic7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnLi4vLi4vY29uZmlndXJhdGlvbi9pbnRlcmZhY2VzJztcbmltcG9ydCBQcm94eWxlc3NBcGlCYXNlIGZyb20gJy4uL2FwaS1iYXNlJztcblxuaW1wb3J0IHtcbiAgICBDT05TT0xFX01FU1NBR0VTX0VOVFJZX0tFWVMsXG4gICAgQ29uc29sZU1lc3NhZ2VFbnRyaWVzLFxuICAgIENvbnNvbGVNZXNzYWdlc0VudHJ5S2V5cyxcbn0gZnJvbSAnLi90eXBlcyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uc29sZU1lc3NhZ2VzQVBJIGV4dGVuZHMgUHJveHlsZXNzQXBpQmFzZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29uc29sZU1lc3NhZ2VzOiBEaWN0aW9uYXJ5PENvbnNvbGVNZXNzYWdlRW50cmllcz47XG5cbiAgICBjb25zdHJ1Y3RvciAoYnJvd3NlcklkOiBzdHJpbmcsIGNsaWVudDogUHJvdG9jb2xBcGkpIHtcbiAgICAgICAgc3VwZXIoYnJvd3NlcklkLCBjbGllbnQpO1xuXG4gICAgICAgIHRoaXMuX2NvbnNvbGVNZXNzYWdlcyA9IHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldEJyb3dzZXJDb25zb2xlTWVzc2FnZXMgKHVybDogc3RyaW5nLCB0eXBlOiBDb25zb2xlTWVzc2FnZXNFbnRyeUtleXMpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICghdGhpcy5fY29uc29sZU1lc3NhZ2VzW3RoaXMuX3Rlc3RSdW4uaWRdKVxuICAgICAgICAgICAgdGhpcy5fY29uc29sZU1lc3NhZ2VzW3RoaXMuX3Rlc3RSdW4uaWRdID0ge307XG5cbiAgICAgICAgY29uc3QgdGVzdFJ1bk1lc3NhZ2VzID0gdGhpcy5fY29uc29sZU1lc3NhZ2VzW3RoaXMuX3Rlc3RSdW4uaWRdO1xuXG4gICAgICAgIGlmICghdGVzdFJ1bk1lc3NhZ2VzW3VybF0pIHtcbiAgICAgICAgICAgIHRlc3RSdW5NZXNzYWdlc1t1cmxdID0ge1xuICAgICAgICAgICAgICAgIGVycm9yOiAgIFtdLFxuICAgICAgICAgICAgICAgIHdhcm5pbmc6IFtdLFxuICAgICAgICAgICAgICAgIGxvZzogICAgIFtdLFxuICAgICAgICAgICAgICAgIGluZm86ICAgIFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXN0UnVuTWVzc2FnZXNbdXJsXVt0eXBlXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX2NsaWVudC5SdW50aW1lLm9uKCdjb25zb2xlQVBJQ2FsbGVkJywgYXN5bmMgKHsgdHlwZSwgYXJncyB9OiBQcm90b2NvbC5SdW50aW1lLkNvbnNvbGVBUElDYWxsZWRFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFDT05TT0xFX01FU1NBR0VTX0VOVFJZX0tFWVMuaW5jbHVkZXModHlwZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb25zdCB7IGhvc3QgfSA9IGF3YWl0IHRoaXMuX2dldEN1cnJlbnRVcmwoKTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gdGhpcy5fZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlcyhob3N0LCB0eXBlIGFzIENvbnNvbGVNZXNzYWdlc0VudHJ5S2V5cyk7XG5cbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goQ29uc29sZU1lc3NhZ2VGb3JtYXR0ZXIuZm9ybWF0KGFyZ3MpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2NyZWF0ZUJyb3dzZXJDb25zb2xlTWVzc2FnZXMgKFxuICAgICAgICBpbmZvOiBzdHJpbmdbXSxcbiAgICAgICAgbG9nOiBzdHJpbmdbXSxcbiAgICAgICAgZXJyb3I6IHN0cmluZ1tdLFxuICAgICAgICB3YXJuOiBzdHJpbmdbXVxuICAgICk6IEJyb3dzZXJDb25zb2xlTWVzc2FnZXMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgIGxvZyxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgd2FybixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QnJvd3NlckNvbnNvbGVNZXNzYWdlcyAoKTogUHJvbWlzZTxCcm93c2VyQ29uc29sZU1lc3NhZ2VzPiB7XG4gICAgICAgIGNvbnN0IHsgaG9zdCB9ICAgICAgICA9IGF3YWl0IHRoaXMuX2dldEN1cnJlbnRVcmwoKTtcbiAgICAgICAgY29uc3QgdGVzdFJ1bk1lc3NhZ2VzID0gdGhpcy5fY29uc29sZU1lc3NhZ2VzW3RoaXMuX3Rlc3RSdW4uaWRdO1xuXG4gICAgICAgIGlmICghdGVzdFJ1bk1lc3NhZ2VzIHx8ICF0ZXN0UnVuTWVzc2FnZXNbaG9zdF0pXG4gICAgICAgICAgICByZXR1cm4gQ29uc29sZU1lc3NhZ2VzQVBJLl9jcmVhdGVCcm93c2VyQ29uc29sZU1lc3NhZ2VzKFtdLCBbXSwgW10sIFtdKTtcblxuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGVzdFJ1bk1lc3NhZ2VzW2hvc3RdKSk7XG5cbiAgICAgICAgcmV0dXJuIENvbnNvbGVNZXNzYWdlc0FQSS5fY3JlYXRlQnJvd3NlckNvbnNvbGVNZXNzYWdlcyhcbiAgICAgICAgICAgIG1lc3NhZ2VzLmluZm8sXG4gICAgICAgICAgICBtZXNzYWdlcy5sb2csXG4gICAgICAgICAgICBtZXNzYWdlcy5lcnJvcixcbiAgICAgICAgICAgIG1lc3NhZ2VzLndhcm5pbmcpO1xuICAgIH1cbn1cbiJdfQ==