"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_pipeline_1 = __importDefault(require("./request-pipeline"));
const add_custom_debug_formatters_1 = __importDefault(require("./add-custom-debug-formatters"));
const debug_loggers_1 = require("../utils/debug-loggers");
const console_messages_1 = __importDefault(require("./console-messages"));
const native_dialogs_1 = __importDefault(require("./native-dialogs"));
const js_error_handling_1 = __importDefault(require("./js-error-handling"));
const session_storage_1 = __importDefault(require("./session-storage"));
const ALL_REQUEST_RESPONSES = { requestStage: 'Request' };
const ALL_REQUEST_REQUESTS = { requestStage: 'Response' };
const ALL_REQUESTS_DATA = [ALL_REQUEST_REQUESTS, ALL_REQUEST_RESPONSES];
class Proxyless {
    constructor(browserId, client) {
        this._client = client;
        this.requestPipeline = new request_pipeline_1.default(browserId, client);
        this.consoleMessagesApi = new console_messages_1.default(browserId, client);
        this.nativeDialogsApi = new native_dialogs_1.default(browserId, client);
        this.sessionStorage = new session_storage_1.default(browserId, client);
        this.jsErrorHandlingApi = new js_error_handling_1.default(browserId, client);
        this.sessionStorage.on('contextStorageModified', sessionStorage => {
            const COMMAND_EXECUTING_FLAG = 'testcafe|driver|command-executing-flag';
            if (sessionStorage) {
                const parsed = JSON.parse(sessionStorage);
                if (parsed.hasOwnProperty(COMMAND_EXECUTING_FLAG)) {
                    const storage = {};
                    storage[COMMAND_EXECUTING_FLAG] = parsed[COMMAND_EXECUTING_FLAG];
                    this.requestPipeline.contextStorage = JSON.stringify(storage);
                }
            }
        });
        (0, add_custom_debug_formatters_1.default)();
    }
    async init(options) {
        // NOTE: We are forced to handle all requests and responses at once
        // because CDP API does not allow specifying request filtering behavior for different handlers.
        await this._client.Fetch.enable({
            patterns: ALL_REQUESTS_DATA,
        });
        const proxylessSystems = [
            this.requestPipeline,
            this.consoleMessagesApi,
            this.nativeDialogsApi,
            this.sessionStorage,
            this.jsErrorHandlingApi,
        ];
        for (const api of proxylessSystems)
            await api.init(options);
        (0, debug_loggers_1.proxylessLogger)('proxyless initialized');
    }
    async dispose() {
        this.requestPipeline.stop();
        await this._client.Fetch.disable();
        (0, debug_loggers_1.proxylessLogger)('proxyless disposed');
    }
}
exports.default = Proxyless;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHlsZXNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsMEVBQTBEO0FBQzFELGdHQUFxRTtBQUVyRSwwREFBeUQ7QUFDekQsMEVBQW9EO0FBQ3BELHNFQUFnRDtBQUNoRCw0RUFBcUQ7QUFDckQsd0VBQStDO0FBRy9DLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFvQixDQUFDO0FBQzVFLE1BQU0sb0JBQW9CLEdBQUksRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFvQixDQUFDO0FBRTdFLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBRXhFLE1BQXFCLFNBQVM7SUFRMUIsWUFBb0IsU0FBaUIsRUFBRSxNQUFtQjtRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFXLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksMEJBQXdCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLDBCQUFrQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSx3QkFBZ0IsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHlCQUFjLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLDJCQUFrQixDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwRSxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxjQUFjLENBQUMsRUFBRTtZQUM5RCxNQUFNLHNCQUFzQixHQUFHLHdDQUF3QyxDQUFDO1lBRXhFLElBQUksY0FBYyxFQUFFO2dCQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUUxQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRTtvQkFDL0MsTUFBTSxPQUFPLEdBQXdCLEVBQUUsQ0FBQztvQkFFeEMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUM7b0JBRWpFLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ2pFO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEscUNBQXdCLEdBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBRSxPQUE4QjtRQUM3QyxtRUFBbUU7UUFDbkUsK0ZBQStGO1FBQy9GLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzVCLFFBQVEsRUFBRSxpQkFBaUI7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxnQkFBZ0IsR0FBRztZQUNyQixJQUFJLENBQUMsZUFBZTtZQUNwQixJQUFJLENBQUMsa0JBQWtCO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0I7WUFDckIsSUFBSSxDQUFDLGNBQWM7WUFDbkIsSUFBSSxDQUFDLGtCQUFrQjtTQUMxQixDQUFDO1FBRUYsS0FBSyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0I7WUFDOUIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVCLElBQUEsK0JBQWUsRUFBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTztRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTVCLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbkMsSUFBQSwrQkFBZSxFQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBL0RELDRCQStEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBSZXF1ZXN0UGF0dGVybiA9IFByb3RvY29sLk5ldHdvcmsuUmVxdWVzdFBhdHRlcm47XG5pbXBvcnQgUHJveHlsZXNzUmVxdWVzdFBpcGVsaW5lIGZyb20gJy4vcmVxdWVzdC1waXBlbGluZSc7XG5pbXBvcnQgYWRkQ3VzdG9tRGVidWdGb3JtYXR0ZXJzIGZyb20gJy4vYWRkLWN1c3RvbS1kZWJ1Zy1mb3JtYXR0ZXJzJztcbmltcG9ydCB7IFByb3h5bGVzc1NldHVwT3B0aW9ucyB9IGZyb20gJy4uL3NoYXJlZC90eXBlcyc7XG5pbXBvcnQgeyBwcm94eWxlc3NMb2dnZXIgfSBmcm9tICcuLi91dGlscy9kZWJ1Zy1sb2dnZXJzJztcbmltcG9ydCBDb25zb2xlTWVzc2FnZXNBUEkgZnJvbSAnLi9jb25zb2xlLW1lc3NhZ2VzJztcbmltcG9ydCBOYXRpdmVEaWFsb2dzQVBJIGZyb20gJy4vbmF0aXZlLWRpYWxvZ3MnO1xuaW1wb3J0IEpTRXJyb3JIYW5kbGluZ0FQSSBmcm9tICcuL2pzLWVycm9yLWhhbmRsaW5nJztcbmltcG9ydCBTZXNzaW9uU3RvcmFnZSBmcm9tICcuL3Nlc3Npb24tc3RvcmFnZSc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnLi4vY29uZmlndXJhdGlvbi9pbnRlcmZhY2VzJztcblxuY29uc3QgQUxMX1JFUVVFU1RfUkVTUE9OU0VTID0geyByZXF1ZXN0U3RhZ2U6ICdSZXF1ZXN0JyB9IGFzIFJlcXVlc3RQYXR0ZXJuO1xuY29uc3QgQUxMX1JFUVVFU1RfUkVRVUVTVFMgID0geyByZXF1ZXN0U3RhZ2U6ICdSZXNwb25zZScgfSBhcyBSZXF1ZXN0UGF0dGVybjtcblxuY29uc3QgQUxMX1JFUVVFU1RTX0RBVEEgPSBbQUxMX1JFUVVFU1RfUkVRVUVTVFMsIEFMTF9SRVFVRVNUX1JFU1BPTlNFU107XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3h5bGVzcyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xpZW50OiBQcm90b2NvbEFwaTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVxdWVzdFBpcGVsaW5lO1xuICAgIHB1YmxpYyByZWFkb25seSBjb25zb2xlTWVzc2FnZXNBcGk6IENvbnNvbGVNZXNzYWdlc0FQSTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmF0aXZlRGlhbG9nc0FwaTogTmF0aXZlRGlhbG9nc0FQSTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2Vzc2lvblN0b3JhZ2U6IFNlc3Npb25TdG9yYWdlO1xuICAgIHB1YmxpYyByZWFkb25seSBqc0Vycm9ySGFuZGxpbmdBcGk6IEpTRXJyb3JIYW5kbGluZ0FQSTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoYnJvd3NlcklkOiBzdHJpbmcsIGNsaWVudDogUHJvdG9jb2xBcGkpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50ICAgICAgICAgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMucmVxdWVzdFBpcGVsaW5lID0gbmV3IFByb3h5bGVzc1JlcXVlc3RQaXBlbGluZShicm93c2VySWQsIGNsaWVudCk7XG4gICAgICAgIHRoaXMuY29uc29sZU1lc3NhZ2VzQXBpID0gbmV3IENvbnNvbGVNZXNzYWdlc0FQSShicm93c2VySWQsIGNsaWVudCk7XG4gICAgICAgIHRoaXMubmF0aXZlRGlhbG9nc0FwaSA9IG5ldyBOYXRpdmVEaWFsb2dzQVBJKGJyb3dzZXJJZCwgY2xpZW50KTtcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IG5ldyBTZXNzaW9uU3RvcmFnZShicm93c2VySWQsIGNsaWVudCk7XG4gICAgICAgIHRoaXMuanNFcnJvckhhbmRsaW5nQXBpID0gbmV3IEpTRXJyb3JIYW5kbGluZ0FQSShicm93c2VySWQsIGNsaWVudCk7XG5cbiAgICAgICAgdGhpcy5zZXNzaW9uU3RvcmFnZS5vbignY29udGV4dFN0b3JhZ2VNb2RpZmllZCcsIHNlc3Npb25TdG9yYWdlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IENPTU1BTkRfRVhFQ1VUSU5HX0ZMQUcgPSAndGVzdGNhZmV8ZHJpdmVyfGNvbW1hbmQtZXhlY3V0aW5nLWZsYWcnO1xuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuaGFzT3duUHJvcGVydHkoQ09NTUFORF9FWEVDVVRJTkdfRkxBRykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZTogRGljdGlvbmFyeTxib29sZWFuPiA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2VbQ09NTUFORF9FWEVDVVRJTkdfRkxBR10gPSBwYXJzZWRbQ09NTUFORF9FWEVDVVRJTkdfRkxBR107XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUuY29udGV4dFN0b3JhZ2UgPSBKU09OLnN0cmluZ2lmeShzdG9yYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFkZEN1c3RvbURlYnVnRm9ybWF0dGVycygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBpbml0IChvcHRpb25zOiBQcm94eWxlc3NTZXR1cE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gTk9URTogV2UgYXJlIGZvcmNlZCB0byBoYW5kbGUgYWxsIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgYXQgb25jZVxuICAgICAgICAvLyBiZWNhdXNlIENEUCBBUEkgZG9lcyBub3QgYWxsb3cgc3BlY2lmeWluZyByZXF1ZXN0IGZpbHRlcmluZyBiZWhhdmlvciBmb3IgZGlmZmVyZW50IGhhbmRsZXJzLlxuICAgICAgICBhd2FpdCB0aGlzLl9jbGllbnQuRmV0Y2guZW5hYmxlKHtcbiAgICAgICAgICAgIHBhdHRlcm5zOiBBTExfUkVRVUVTVFNfREFUQSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcHJveHlsZXNzU3lzdGVtcyA9IFtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdFBpcGVsaW5lLFxuICAgICAgICAgICAgdGhpcy5jb25zb2xlTWVzc2FnZXNBcGksXG4gICAgICAgICAgICB0aGlzLm5hdGl2ZURpYWxvZ3NBcGksXG4gICAgICAgICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLFxuICAgICAgICAgICAgdGhpcy5qc0Vycm9ySGFuZGxpbmdBcGksXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChjb25zdCBhcGkgb2YgcHJveHlsZXNzU3lzdGVtcylcbiAgICAgICAgICAgIGF3YWl0IGFwaS5pbml0KG9wdGlvbnMpO1xuXG4gICAgICAgIHByb3h5bGVzc0xvZ2dlcigncHJveHlsZXNzIGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRpc3Bvc2UgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLnJlcXVlc3RQaXBlbGluZS5zdG9wKCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5fY2xpZW50LkZldGNoLmRpc2FibGUoKTtcblxuICAgICAgICBwcm94eWxlc3NMb2dnZXIoJ3Byb3h5bGVzcyBkaXNwb3NlZCcpO1xuICAgIH1cbn1cbiJdfQ==