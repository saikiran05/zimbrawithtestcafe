"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_base_1 = __importDefault(require("../api-base"));
class NativeDialogsAPI extends api_base_1.default {
    constructor(browserId, client) {
        super(browserId, client);
        this._nativeDialogs = {};
    }
    async init() {
        this._client.Page.on('javascriptDialogOpening', async ({ type, message, url }) => {
            await this._client.Page.handleJavaScriptDialog({ accept: true });
            this._nativeDialogs[this._testRun.id] = this._nativeDialogs[this._testRun.id] || [];
            this._nativeDialogs[this._testRun.id].unshift({
                text: message,
                type,
                url,
            });
        });
    }
    async getNativeDialogHistory() {
        const nativeDialogs = this._nativeDialogs[this._testRun.id] || [];
        return nativeDialogs;
    }
    async fixMissingBeforeUnloadHandling() {
        // NOTE: do fake mouse event to make cdp handle the `beforeunload` event.
        // the `beforeunload` event is not handled without this click.
        await this._client.Input.dispatchMouseEvent({
            type: 'mousePressed',
            button: 'left',
            x: -1,
            y: -1,
        });
    }
}
exports.default = NativeDialogsAPI;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL25hdGl2ZS1kaWFsb2dzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsMkRBQTJDO0FBRTNDLE1BQXFCLGdCQUFpQixTQUFRLGtCQUFnQjtJQUcxRCxZQUFhLFNBQWlCLEVBQUUsTUFBbUI7UUFDL0MsS0FBSyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQThDLEVBQUUsRUFBRTtZQUN6SCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFFakUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFcEYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDMUMsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsSUFBSTtnQkFDSixHQUFHO2FBQ04sQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sS0FBSyxDQUFDLHNCQUFzQjtRQUMvQixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWxFLE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxLQUFLLENBQUMsOEJBQThCO1FBQ3ZDLHlFQUF5RTtRQUN6RSw4REFBOEQ7UUFDOUQsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztZQUN4QyxJQUFJLEVBQUksY0FBYztZQUN0QixNQUFNLEVBQUUsTUFBTTtZQUNkLENBQUMsRUFBTyxDQUFDLENBQUM7WUFDVixDQUFDLEVBQU8sQ0FBQyxDQUFDO1NBQ2IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBdkNELG1DQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3RvY29sQXBpIH0gZnJvbSAnY2hyb21lLXJlbW90ZS1pbnRlcmZhY2UnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCB7IERpY3Rpb25hcnkgfSBmcm9tICcuLi8uLi9jb25maWd1cmF0aW9uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFByb3h5bGVzc0FwaUJhc2UgZnJvbSAnLi4vYXBpLWJhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXRpdmVEaWFsb2dzQVBJIGV4dGVuZHMgUHJveHlsZXNzQXBpQmFzZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfbmF0aXZlRGlhbG9nczogRGljdGlvbmFyeTxOYXRpdmVEaWFsb2dIaXN0b3J5SXRlbVtdPjtcblxuICAgIGNvbnN0cnVjdG9yIChicm93c2VySWQ6IHN0cmluZywgY2xpZW50OiBQcm90b2NvbEFwaSkge1xuICAgICAgICBzdXBlcihicm93c2VySWQsIGNsaWVudCk7XG5cbiAgICAgICAgdGhpcy5fbmF0aXZlRGlhbG9ncyA9IHt9O1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBpbml0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5fY2xpZW50LlBhZ2Uub24oJ2phdmFzY3JpcHREaWFsb2dPcGVuaW5nJywgYXN5bmMgKHsgdHlwZSwgbWVzc2FnZSwgdXJsIH06IFByb3RvY29sLlBhZ2UuSmF2YXNjcmlwdERpYWxvZ09wZW5pbmdFdmVudCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fY2xpZW50LlBhZ2UuaGFuZGxlSmF2YVNjcmlwdERpYWxvZyh7IGFjY2VwdDogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgdGhpcy5fbmF0aXZlRGlhbG9nc1t0aGlzLl90ZXN0UnVuLmlkXSA9IHRoaXMuX25hdGl2ZURpYWxvZ3NbdGhpcy5fdGVzdFJ1bi5pZF0gfHwgW107XG5cbiAgICAgICAgICAgIHRoaXMuX25hdGl2ZURpYWxvZ3NbdGhpcy5fdGVzdFJ1bi5pZF0udW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgdGV4dDogbWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0TmF0aXZlRGlhbG9nSGlzdG9yeSAoKTogUHJvbWlzZTxOYXRpdmVEaWFsb2dIaXN0b3J5SXRlbVtdPiB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZURpYWxvZ3MgPSB0aGlzLl9uYXRpdmVEaWFsb2dzW3RoaXMuX3Rlc3RSdW4uaWRdIHx8IFtdO1xuXG4gICAgICAgIHJldHVybiBuYXRpdmVEaWFsb2dzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBmaXhNaXNzaW5nQmVmb3JlVW5sb2FkSGFuZGxpbmcgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBOT1RFOiBkbyBmYWtlIG1vdXNlIGV2ZW50IHRvIG1ha2UgY2RwIGhhbmRsZSB0aGUgYGJlZm9yZXVubG9hZGAgZXZlbnQuXG4gICAgICAgIC8vIHRoZSBgYmVmb3JldW5sb2FkYCBldmVudCBpcyBub3QgaGFuZGxlZCB3aXRob3V0IHRoaXMgY2xpY2suXG4gICAgICAgIGF3YWl0IHRoaXMuX2NsaWVudC5JbnB1dC5kaXNwYXRjaE1vdXNlRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogICAnbW91c2VQcmVzc2VkJyxcbiAgICAgICAgICAgIGJ1dHRvbjogJ2xlZnQnLFxuICAgICAgICAgICAgeDogICAgICAtMSxcbiAgICAgICAgICAgIHk6ICAgICAgLTEsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==