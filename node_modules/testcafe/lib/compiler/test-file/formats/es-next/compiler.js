"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const load_libs_1 = __importDefault(require("../../../babel/load-libs"));
const api_based_1 = __importDefault(require("../../api-based"));
const is_flow_code_1 = __importDefault(require("./is-flow-code"));
const get_base_babel_options_1 = __importDefault(require("../../../babel/get-base-babel-options"));
const disable_v8_optimization_note_1 = __importDefault(require("../../disable-v8-optimization-note"));
const extensions_1 = __importDefault(require("../extensions"));
//NOTE: The semicolon ; prevents the declaration from being bound with eval
const DISABLE_V8_OPTIMIZATION_CODE = `;/*${disable_v8_optimization_note_1.default}*/
eval("");
`;
class ESNextTestFileCompiler extends api_based_1.default {
    static getBabelOptions(filename, code, { isCompilerServiceMode, experimentalEsm } = {}) {
        const { presetStage2, presetFlow, transformRuntime, presetEnvForTestCode, presetReact, moduleResolver, proposalPrivateMethods, proposalClassProperties, } = (0, load_libs_1.default)({ isCompilerServiceMode, experimentalEsm });
        const opts = Object.assign({}, get_base_babel_options_1.default, {
            presets: [presetStage2, presetEnvForTestCode, presetReact],
            plugins: [transformRuntime, moduleResolver, proposalPrivateMethods, proposalClassProperties],
            sourceMaps: 'inline',
            filename,
        });
        if ((0, is_flow_code_1.default)(code))
            opts.presets.push(presetFlow);
        return opts;
    }
    _compileCode(code, filename) {
        const { babel } = (0, load_libs_1.default)(this);
        if (this.cache[filename])
            return this.cache[filename];
        if (this.isCompilerServiceMode || this.experimentalEsm)
            code += DISABLE_V8_OPTIMIZATION_CODE;
        const opts = ESNextTestFileCompiler.getBabelOptions(filename, code, this);
        const compiled = babel.transform(code, opts);
        this.cache[filename] = compiled.code;
        return compiled.code;
    }
    _getRequireCompilers() {
        const requireCompilers = {
            [extensions_1.default.js]: (code, filename) => this._compileCode(code, filename),
            [extensions_1.default.jsx]: (code, filename) => this._compileCode(code, filename),
            [extensions_1.default.cjs]: (code, filename) => this._compileCode(code, filename),
        };
        if (this.experimentalEsm)
            requireCompilers[extensions_1.default.mjs] = (code, filename) => this._compileCode(code, filename);
        return requireCompilers;
    }
    get canCompileInEsm() {
        return true;
    }
    getSupportedExtension() {
        const supportedExtensions = [extensions_1.default.js, extensions_1.default.jsx, extensions_1.default.cjs];
        if (this.experimentalEsm)
            supportedExtensions.push(extensions_1.default.mjs);
        return supportedExtensions;
    }
}
exports.default = ESNextTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlFQUFxRDtBQUNyRCxnRUFBMkQ7QUFDM0Qsa0VBQXdDO0FBQ3hDLG1HQUF1RTtBQUN2RSxzR0FBOEU7QUFDOUUsK0RBQXVDO0FBRXZDLDJFQUEyRTtBQUMzRSxNQUFNLDRCQUE0QixHQUNsQyxNQUFNLHNDQUE0Qjs7Q0FFakMsQ0FBQztBQUVGLE1BQXFCLHNCQUF1QixTQUFRLG1CQUE0QjtJQUU1RSxNQUFNLENBQUMsZUFBZSxDQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ25GLE1BQU0sRUFDRixZQUFZLEVBQ1osVUFBVSxFQUNWLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLGNBQWMsRUFDZCxzQkFBc0IsRUFDdEIsdUJBQXVCLEdBQzFCLEdBQUcsSUFBQSxtQkFBYSxFQUFDLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUU5RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxnQ0FBa0IsRUFBRTtZQUMvQyxPQUFPLEVBQUssQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxDQUFDO1lBQzdELE9BQU8sRUFBSyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQztZQUMvRixVQUFVLEVBQUUsUUFBUTtZQUNwQixRQUFRO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFBLHNCQUFVLEVBQUMsSUFBSSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxZQUFZLENBQUUsSUFBSSxFQUFFLFFBQVE7UUFDeEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUEsbUJBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoQyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsZUFBZTtZQUNsRCxJQUFJLElBQUksNEJBQTRCLENBQUM7UUFFekMsTUFBTSxJQUFJLEdBQU8sc0JBQXNCLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRXJDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsb0JBQW9CO1FBQ2hCLE1BQU0sZ0JBQWdCLEdBQUc7WUFDckIsQ0FBQyxvQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1lBQ3ZFLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztZQUN2RSxDQUFDLG9CQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7U0FDMUUsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLGVBQWU7WUFDcEIsZ0JBQWdCLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTdGLE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLG9CQUFVLENBQUMsRUFBRSxFQUFFLG9CQUFVLENBQUMsR0FBRyxFQUFFLG9CQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFNUUsSUFBSSxJQUFJLENBQUMsZUFBZTtZQUNwQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QyxPQUFPLG1CQUFtQixDQUFDO0lBQy9CLENBQUM7Q0FDSjtBQXJFRCx5Q0FxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9hZEJhYmVsTGlicyBmcm9tICcuLi8uLi8uLi9iYWJlbC9sb2FkLWxpYnMnO1xuaW1wb3J0IEFQSUJhc2VkVGVzdEZpbGVDb21waWxlckJhc2UgZnJvbSAnLi4vLi4vYXBpLWJhc2VkJztcbmltcG9ydCBpc0Zsb3dDb2RlIGZyb20gJy4vaXMtZmxvdy1jb2RlJztcbmltcG9ydCBCQVNFX0JBQkVMX09QVElPTlMgZnJvbSAnLi4vLi4vLi4vYmFiZWwvZ2V0LWJhc2UtYmFiZWwtb3B0aW9ucyc7XG5pbXBvcnQgRElTQUJMRV9WOF9PUFRJTUlaQVRJT05fTk9URSBmcm9tICcuLi8uLi9kaXNhYmxlLXY4LW9wdGltaXphdGlvbi1ub3RlJztcbmltcG9ydCBFeHRlbnNpb25zIGZyb20gJy4uL2V4dGVuc2lvbnMnO1xuXG4vL05PVEU6IFRoZSBzZW1pY29sb24gOyBwcmV2ZW50cyB0aGUgZGVjbGFyYXRpb24gZnJvbSBiZWluZyBib3VuZCB3aXRoIGV2YWxcbmNvbnN0IERJU0FCTEVfVjhfT1BUSU1JWkFUSU9OX0NPREUgPVxuYDsvKiR7RElTQUJMRV9WOF9PUFRJTUlaQVRJT05fTk9URX0qL1xuZXZhbChcIlwiKTtcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVTTmV4dFRlc3RGaWxlQ29tcGlsZXIgZXh0ZW5kcyBBUElCYXNlZFRlc3RGaWxlQ29tcGlsZXJCYXNlIHtcblxuICAgIHN0YXRpYyBnZXRCYWJlbE9wdGlvbnMgKGZpbGVuYW1lLCBjb2RlLCB7IGlzQ29tcGlsZXJTZXJ2aWNlTW9kZSwgZXhwZXJpbWVudGFsRXNtIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBwcmVzZXRTdGFnZTIsXG4gICAgICAgICAgICBwcmVzZXRGbG93LFxuICAgICAgICAgICAgdHJhbnNmb3JtUnVudGltZSxcbiAgICAgICAgICAgIHByZXNldEVudkZvclRlc3RDb2RlLFxuICAgICAgICAgICAgcHJlc2V0UmVhY3QsXG4gICAgICAgICAgICBtb2R1bGVSZXNvbHZlcixcbiAgICAgICAgICAgIHByb3Bvc2FsUHJpdmF0ZU1ldGhvZHMsXG4gICAgICAgICAgICBwcm9wb3NhbENsYXNzUHJvcGVydGllcyxcbiAgICAgICAgfSA9IGxvYWRCYWJlbExpYnMoeyBpc0NvbXBpbGVyU2VydmljZU1vZGUsIGV4cGVyaW1lbnRhbEVzbSB9KTtcblxuICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgQkFTRV9CQUJFTF9PUFRJT05TLCB7XG4gICAgICAgICAgICBwcmVzZXRzOiAgICBbcHJlc2V0U3RhZ2UyLCBwcmVzZXRFbnZGb3JUZXN0Q29kZSwgcHJlc2V0UmVhY3RdLFxuICAgICAgICAgICAgcGx1Z2luczogICAgW3RyYW5zZm9ybVJ1bnRpbWUsIG1vZHVsZVJlc29sdmVyLCBwcm9wb3NhbFByaXZhdGVNZXRob2RzLCBwcm9wb3NhbENsYXNzUHJvcGVydGllc10sXG4gICAgICAgICAgICBzb3VyY2VNYXBzOiAnaW5saW5lJyxcbiAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaXNGbG93Q29kZShjb2RlKSlcbiAgICAgICAgICAgIG9wdHMucHJlc2V0cy5wdXNoKHByZXNldEZsb3cpO1xuXG4gICAgICAgIHJldHVybiBvcHRzO1xuICAgIH1cblxuICAgIF9jb21waWxlQ29kZSAoY29kZSwgZmlsZW5hbWUpIHtcbiAgICAgICAgY29uc3QgeyBiYWJlbCB9ID0gbG9hZEJhYmVsTGlicyh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5jYWNoZVtmaWxlbmFtZV0pXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtmaWxlbmFtZV07XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDb21waWxlclNlcnZpY2VNb2RlIHx8IHRoaXMuZXhwZXJpbWVudGFsRXNtKVxuICAgICAgICAgICAgY29kZSArPSBESVNBQkxFX1Y4X09QVElNSVpBVElPTl9DT0RFO1xuXG4gICAgICAgIGNvbnN0IG9wdHMgICAgID0gRVNOZXh0VGVzdEZpbGVDb21waWxlci5nZXRCYWJlbE9wdGlvbnMoZmlsZW5hbWUsIGNvZGUsIHRoaXMpO1xuICAgICAgICBjb25zdCBjb21waWxlZCA9IGJhYmVsLnRyYW5zZm9ybShjb2RlLCBvcHRzKTtcblxuICAgICAgICB0aGlzLmNhY2hlW2ZpbGVuYW1lXSA9IGNvbXBpbGVkLmNvZGU7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBpbGVkLmNvZGU7XG4gICAgfVxuXG4gICAgX2dldFJlcXVpcmVDb21waWxlcnMgKCkge1xuICAgICAgICBjb25zdCByZXF1aXJlQ29tcGlsZXJzID0ge1xuICAgICAgICAgICAgW0V4dGVuc2lvbnMuanNdOiAgKGNvZGUsIGZpbGVuYW1lKSA9PiB0aGlzLl9jb21waWxlQ29kZShjb2RlLCBmaWxlbmFtZSksXG4gICAgICAgICAgICBbRXh0ZW5zaW9ucy5qc3hdOiAoY29kZSwgZmlsZW5hbWUpID0+IHRoaXMuX2NvbXBpbGVDb2RlKGNvZGUsIGZpbGVuYW1lKSxcbiAgICAgICAgICAgIFtFeHRlbnNpb25zLmNqc106IChjb2RlLCBmaWxlbmFtZSkgPT4gdGhpcy5fY29tcGlsZUNvZGUoY29kZSwgZmlsZW5hbWUpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLmV4cGVyaW1lbnRhbEVzbSlcbiAgICAgICAgICAgIHJlcXVpcmVDb21waWxlcnNbRXh0ZW5zaW9ucy5tanNdID0gKGNvZGUsIGZpbGVuYW1lKSA9PiB0aGlzLl9jb21waWxlQ29kZShjb2RlLCBmaWxlbmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVpcmVDb21waWxlcnM7XG4gICAgfVxuXG4gICAgZ2V0IGNhbkNvbXBpbGVJbkVzbSAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldFN1cHBvcnRlZEV4dGVuc2lvbiAoKSB7XG4gICAgICAgIGNvbnN0IHN1cHBvcnRlZEV4dGVuc2lvbnMgPSBbRXh0ZW5zaW9ucy5qcywgRXh0ZW5zaW9ucy5qc3gsIEV4dGVuc2lvbnMuY2pzXTtcblxuICAgICAgICBpZiAodGhpcy5leHBlcmltZW50YWxFc20pXG4gICAgICAgICAgICBzdXBwb3J0ZWRFeHRlbnNpb25zLnB1c2goRXh0ZW5zaW9ucy5tanMpO1xuXG4gICAgICAgIHJldHVybiBzdXBwb3J0ZWRFeHRlbnNpb25zO1xuICAgIH1cbn1cbiJdfQ==