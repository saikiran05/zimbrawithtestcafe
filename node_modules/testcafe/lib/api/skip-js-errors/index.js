"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSkipJsErrorsOptions = exports.ensureSkipJsErrorsCallbackWrapped = exports.isSkipJsErrorsOptionsObject = exports.isSkipJsErrorsCallbackWithOptionsObject = void 0;
const make_reg_exp_1 = require("../../utils/make-reg-exp");
const client_function_builder_1 = __importDefault(require("../../client-functions/client-function-builder"));
function depsToJsonWithRegExp(deps) {
    return `{
        stack: ${deps.stack}, 
        pageUrl: ${deps.pageUrl},
        message: ${deps.message}, 
    }`;
}
function getSkipJSErrorsObjectFunction(deps, proxyless) {
    const dependencies = proxyless ? depsToJsonWithRegExp(deps) : 'deps';
    return `
        let { stack, pageUrl, message } = ${dependencies};

        return stack.test(err.stack) && pageUrl.test(err.pageUrl) && message.test(err.message);
    `;
}
function getSkipJSErrorsDependenciesFunction({ fn, dependencies }) {
    let varDeclaration = '';
    if (dependencies)
        varDeclaration = `const { ${Object.keys(dependencies).join(', ')} } = ${JSON.stringify(dependencies)};`;
    return `
        ${varDeclaration}
        
        return (${fn.toString()})(err);
    `;
}
function isSkipJsErrorsCallbackWithOptionsObject(obj) {
    return !!obj && typeof obj === 'object' && 'fn' in obj;
}
exports.isSkipJsErrorsCallbackWithOptionsObject = isSkipJsErrorsCallbackWithOptionsObject;
function isSkipJsErrorsOptionsObject(obj) {
    return !!obj && typeof obj === 'object' && !isSkipJsErrorsCallbackWithOptionsObject(obj);
}
exports.isSkipJsErrorsOptionsObject = isSkipJsErrorsOptionsObject;
function ensureSkipJsErrorsCallbackWrapped(options, dependencies = {}) {
    if (typeof options === 'function')
        return wrapSkipJsErrorsCallback(options, dependencies);
    return options;
}
exports.ensureSkipJsErrorsCallbackWrapped = ensureSkipJsErrorsCallbackWrapped;
function wrapSkipJsErrorsCallback(options, dependencies) {
    return { fn: options, dependencies };
}
function prepareSkipJsErrorsOptions(options, proxyless) {
    options = ensureSkipJsErrorsCallbackWrapped(options);
    if (isSkipJsErrorsCallbackWithOptionsObject(options))
        return createSkipJsErrorsCallbackFunction(options, proxyless);
    if (isSkipJsErrorsOptionsObject(options))
        return createSkipJsErrorsObjectFunction(prepareOptionsObject(options), proxyless);
    return options;
}
exports.prepareSkipJsErrorsOptions = prepareSkipJsErrorsOptions;
function createSkipJsErrorsObjectFunction(deps, proxyless) {
    deps.message = deps.message || new RegExp('');
    deps.stack = deps.stack || new RegExp('');
    deps.pageUrl = deps.pageUrl || new RegExp('');
    const func = new Function('err', getSkipJSErrorsObjectFunction(deps, proxyless));
    if (proxyless)
        return func;
    const callbackWrapper = wrapSkipJsErrorsCallback(func, { deps });
    return createSkipJsErrorsCallbackFunction(callbackWrapper, false);
}
function createSkipJsErrorsCallbackFunction({ fn, dependencies }, proxyless) {
    if (proxyless)
        return new Function('err', getSkipJSErrorsDependenciesFunction({ fn, dependencies }));
    const methodName = 'skipJsErrors handler';
    const options = { dependencies };
    return new client_function_builder_1.default(fn, options, {
        instantiation: methodName,
        execution: methodName,
    }).getCommand();
}
function prepareOptionsObject(opts) {
    opts.message = (0, make_reg_exp_1.parseRegExpString)(opts.message);
    opts.stack = (0, make_reg_exp_1.parseRegExpString)(opts.stack);
    opts.pageUrl = (0, make_reg_exp_1.parseRegExpString)(opts.pageUrl);
    return opts;
}
//# sourceMappingURL=data:application/json;base64,